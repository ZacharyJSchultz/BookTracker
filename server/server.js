const express = require("express");
const cors = require("cors");
const mysql = require("mysql2");
const fs = require("fs");
const path = require("path");
const bodyParser = require("body-parser");  // For parsing submit-form JSON

const app = express();

const insertBooksQuery = "INSERT INTO Books VALUES (?, ?)";
const fetchQuery = "SELECT title, author, rating, dateCompleted FROM (Books JOIN BookLog) ORDER BY dateCompleted DESC";
const fetchGenresQuery = "SELECT * FROM (BookGenres JOIN Genres) WHERE book_id IN (SELECT book_id FROM (Books JOIN BookLog))";
const checkBookExistsQuery = "SELECT book_id FROM Books WHERE title = ? AND author = ?";
const insertBookGenresQuery = "INSERT INTO BookGenres VALUES (?, ?)";
const insertBookLogQuery = "INSERT INTO BookLog VALUES (?, ?, NOW())";
const removeBookGenresQuery = "DELETE FROM BookGenres WHERE book_id = ?";
const removeBookLogQuery = "DELETE FROM BookLog WHERE book_id = (SELECT book_id FROM Books where title=? AND author=?)";

app.use(bodyParser.json());
app.use(cors());
app.use(express.json());

const NUM_GENRES = 31;  // 34 total preconfigured genres with const IDs (because they're configured in Docker startup)
const GENRES_MAP = {
    "Fiction": 1,
    "NonFiction": 2,
    "ActionAdventure": 3,
    "Comedy": 4,
    "CrimeMystery": 5,
    "Fantasy": 6,
    "Romance": 7,
    "ScienceFiction": 8,
    "HistoricalFiction": 9,
    "SuspenseThriller": 10,
    "Drama": 11,
    "Horror": 12,
    "Poetry": 13,
    "GraphicNovel": 14,
    "YoungAdult": 15,
    "ChildrensBook": 16,
    "Comic": 17,
    "MemoirAutobiography": 18,
    "Biography": 19,
    "FoodDrink": 20,
    "ArtPhotography": 21,
    "SelfHelp": 22,
    "History": 23,
    "Travel": 24,
    "TrueCrime": 25,
    "ScienceTechnology": 26,
    "HumanitiesSocialSciences": 27,
    "Essay": 28,
    "Guide": 29,
    "ReligionSpirituality": 30,
    "Other": 31,
}

// Connect to back-end DB
var con = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "password",
    port: 13306,
    database: "BookTracker"
});

con.connect((err) => {
    if (err)
        throw err;

    console.log("Connection Successful!");
});
    /*con.query("SELECT * FROM Books", function(err, rslt) {
        if (err)
            throw err;
        console.log("Result:\n")
        console.log("Title: " + rslt[0]["title"])
        console.log("Author(s): " + rslt[0]["author"])
        console.log("Genre(s): " + rslt[0]["genres"])
        console.log("Rating: " + rslt[0]["rating"])
        console.log("Date Completed: " + String(rslt[0]["dateCompleted"]).substring(0, 21))

        app.get("/message", (req, res) => {
            res.json({ message: JSON.stringify(rslt) });
            console.log(JSON.stringify(rslt));
        });
    })*/

/* Handle form submission, and send to database
 *
 * Steps:
 *  1. Check if Book already exists in Books table. If it does, add that Book_id to BookLog
 *  2. If Book exists, add that book_id (and optional rating) to BookLog
 *     If Book does not exist, add to Books, then add that Book_ID to BookLog
 */
app.post("/submit-form", (req, res) => {
    try {
        const formData = req.body;

        // Write to file
        /*const filePath = path.join(__dirname, "form-data.json");      // Store form data to file, as test
            fs.writeFile(filePath, JSON.stringify(formData, null, 2), (err) => {
                if (err) {
                    console.log("Error writing file:", err);
                    return res.status(500).send("Error writing file");
                }
            });*/

        // Check if Book alr exists
        let book_id = -1;
        con.query(checkBookExistsQuery, [formData.title, formData.author], (err, rslt) => {
            if (!err && rslt !== null)
                book_id = rslt;
        });

        // If book does not alr exist
        if (book_id === -1) {
            // Execute premade insert query with prepared statement (to prevent any sort of attacks / for extra safety)
            con.execute(insertBooksQuery, [formData.title, formData.author], (err) => {
                if (err) {
                    if (err.code !== "ER_DUP_ENTRY") {
                        console.error("Error executing query:", err.stack);
                        return res.status(500).send("Error uploading to database");
                    }
                } else {
                    // Log output for clarity/testing
                    console.log("Successfully written to Books:", 
                        "\nTitle:", formData.title, 
                        "\nAuthor(s):", formData.author, 
                    );
                }
            });

            // Re-execute book query to obtain new book_id # automatically generated by SQL
            con.query(checkBookExistsQuery, [formData.title, formData.author], (err, rslt) => {
                if (!err && rslt !== null)
                    book_id = rslt;
            });
        }

        // Add to BookGenres
        for (const key in formData) {
            // If formData has the property, and the key is a boolean (not title/author/etc.) and the boolean is true
            if (formData.hasOwnProperty(key) && formData[key] instanceof boolean && formData[key])
                con.execute(insertBookGenresQuery, [book_id, formData[key]], (err) => {
                    if (err && err.code !== "ER_DUP_ENTRY") {
                        console.error("Error executing query:", err.stack);
                    } else {
                        console.log("Successfully written to BookGenres:", 
                            "\nBook_ID:", book_id, 
                            "\nGenre:", key 
                        );
                    }
                });
        }

        // Add to BookLog
        con.execute(insertBookLogQuery, [book_id, formData.rating], (err, rslt) => {
            if (err) {
                if (err.code === "ER_DUP_ENTRY") {
                    console.error("Error: Duplicate entry");
                    return res.status(500).send("Error: You have already read this book");
                } else {
                    console.error("Error executing query:", err.stack);
                    return res.status(500).send("Error uploading to database");
                }
            } else {
                // Log output for clarity/testing
                console.log("Successfully written to BookLog:", 
                    "\nBook_ID:", book_id, 
                    "\nRating:", formData.rating || 0
                );

                // Send message back to client, to be displayed in alert
                return res.status(200).send("Form successfully submitted");
            }
        });
    } catch (err) {
        console.error("Error executing query:", err.stack)
        return res.status(500).send("Error uploading to database");
    }
});

// Handle the fetching of data, sending it to front-end to display in table
app.get("/view-db", (req, res) => {
    try {
        let books, genres, rslt;
        con.query(fetchQuery, (err, rslt) => {
            if(err)
                throw err;
            books = rslt;
        })
        con.query(fetchGenresQuery, (err, rslt) => {
            if(err)
                throw err;
            genres = rslt;
        })

        // TODO: Do stuff to rslt. TEST! I think most things are probably broken. Might have to do some sorting work

        return res.status(200).json(rslt)
    } catch (e) {
        console.error("Error fetching data:", e)
        return res.status(500).send("Error fetching data");
    }
});

/* Handle the removal of an item
 *
 * Steps:
 *  1. Remove Book from BookLog
 *  2. Remove Book from BookGenres (all instances of it with the relevant book_id)
 * 
 *  Note: The book is not deleted from Books; it can just be reused if it is ever re-added. 
 *  Likewise, the reason the book is deleted from BookGenres is so the user can switch the 
 *  genres if they choose if they ever re-add the book.
 */
app.delete("/remove-item", (req, res) => {
    try {
        con.execute(removeBookLogQuery, [req.body.title, req.body.author], (err) => {
            if (err) {
                console.log("Error removing item from BookLog:", e);
                return res.status(500).send("Error removing item");
            }
        });

        con.execute(removeBookGenresQuery, [req.body.title, req.body.author], (err) => {
            if (err) {
                console.log("Error removing item from BookGenres:", e);
                return res.status(500).send("Error removing item");
            }
        })

        return res.status(200).send("Entry successfully removed");
    } catch (e) {
        console.log("Error removing item:", e);
        return res.status(500).send("Error removing item");
    }
});


/*app.get("/message", (req, res) => {
    res.json({ message: "This is a test!" });
});*/

app.listen(8000, () => {
    console.log(`Server is running on port 8000.`);
  });